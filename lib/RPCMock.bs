import bluebird as Promise
import ./RPC

export RPCMock

mocks = {}

class RPCMock extends RPC

  init: (id, scope) ->
    @id = id
    @scope = scope
    mocks[id] = @

  _sendInvocation: (id, payload, connection) ->
    that = @
    return new Promise((resolve, reject) ->
      that._timeouts[payload.signature] = setTimeout(() ->
        reject(new Error('Message timed out.'))
      , that.timeout)
      that._callbacks[payload.signature] = (result) ->
        clearTimeout(that._timeouts[payload.signature])
        if result instanceof Error
          reject(result)
        else
          resolve(result)
      mocks[id]._onData(null, payload)
    )

  _sendAnswer: (id, payload, connection) ->
    return Promise.resolve(mocks[id]._onData(null, payload))
