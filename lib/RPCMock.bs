import bluebird as Promise
import ./RPC

export RPCMock

mocks = {}

class RPCMock extends RPC

  init: (id, scope) ->
    @id = id
    @scope = scope
    mocks[id] = @
    @delays = {}

  _sendInvocation: (id, payload, connection) ->
    that = @
    delay = 0
    if id in @delays
      delay = @delays[id]
    return new Promise((resolve, reject) ->
      setTimeout(() ->
        that._timeouts[payload.signature] = setTimeout(() ->
          reject(new Error('Message timed out.'))
        , that.timeout)
        that._callbacks[payload.signature] = (result) ->
          clearTimeout(that._timeouts[payload.signature])
          if result instanceof Error
            reject(result)
          else
            resolve(result)
        mocks[id]._onData(null, payload)

      , delay)
    )

  _sendAnswer: (id, payload, connection) ->
    delay = 0
    if id in @delays
      delay = @delays[id]
    return new Promise((resolve) ->
      setTimeout(() ->
        resolve(mocks[id]._onData(null, payload))
      , delay)
    )
