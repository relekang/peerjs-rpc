import sha1
import bluebird as Promise
import peerjs as Peer

export RPC


class RPC
  _callbacks: {}
  _timeouts: {}
  timeout: 5000

  init: (id, scope, options) ->
    if options
      peerOptions = options.peerOptions or {}
      peerConfig = options.peerConfig or {}
      @debug = options.debug
      @timeout = options.timeout or 5000
    @peer = new Peer(id, peerOptions, peerConfig)
    @scope = scope
    @id = id

    @peer.on('connection', (connection) ->
      connection.on('data', (data) -> @@@_onData(connection, data))
    )

  invoke: (id, func, args, callback) ->
    payload = {
      type: 'rpc-invoke'
      func: func
      args: args
      orig: @id
      signature: @_createSignature(@id, id, 'invoke')
    }
    return @_send(id, payload).nodeify(callback)

  attr: (id, attr, callback) ->
    payload = {
      type: 'rpc-attr'
      attr: attr
      orig: @id
      signature: @_createSignature(@id, id, 'attr')
    }
    return @_send(id, payload).nodeify(callback)

  ping: (id, callback) ->
    payload = {
      type: 'rpc-ping',
      orig: @id,
      signature: @_createSignature(@id, id, 'ping')
    }
    return @_send(id, payload)
      .catch((err) ->
        if err.message.match(/timed out/)
          return false
        throw err
      ).nodeify(callback)

  _createSignature: (from, to, func) -> sha1('#{Date.now()}:#{from}:#{to}:#{func}')

  _onData: (connection, data) ->
    if not 'type' in data
      return

    @_log('Received data: ', data)

    if data.type.match(/^rpc-(:?ping|attr|invoke)$/)
      @_handlers()[data.type].bind(@)(connection, data)

    else if data.type.match(/return/)
      @_callbacks[data.signature](data.data)

    else if data.type.match(/pong/)
      @_callbacks[data.signature](true)

  _getConnection: (id) ->
    return new Promise((resolve) ->
      connection = @@peer.connect(id)
      if connection
        connection.on('data', (data) -> @@@_onData(connection, data))
        if connection.open
          resolve(connection)
        else
          connection.on('open', (conn) ->
            resolve(connection)
          )
    )

  _send: (id, payload) ->
    return @_getConnection(id)
      .then((connection) ->
        return new Promise((resolve, reject) ->
          @@@_timeouts[payload.signature] = setTimeout(() ->
            reject(new Error('Message timed out.'))
          , @@@timeout)
          @@@_callbacks[payload.signature] = (result) ->
            clearTimeout(@@@@_timeouts[payload.signature])
            if result instanceof Error
              reject(result)
            else
              resolve(result)
          connection.send(payload)
          @@@_log('Sending payload to "#{id}": ', payload)
        )
      )

  _log: (message, obj) ->
    if not @debug then return
    CircularJSON = require('circular-json')
    console.log('RPC:  #{message} #{CircularJSON.stringify(obj)}')

  _handlers: () ->
    return {
    'rpc-ping': (connection, data) ->
      payload = {
        type: 'rpc-pong'
        signature: data.signature
        orig: @@id
      }
      @@_log('Sending payload: ', payload)
      connection.send(payload)

    'rpc-attr': (connection, data) ->
      payload = {
        type: 'rpc-attr-return'
        data: @@scope[data.attr]
        signature: data.signature
        orig: @@id
      }
      @@_log('Sending payload: ', payload)
      connection.send(payload)

    'rpc-invoke': (connection, data) ->
      if data.func in @@scope
        if data.args == undefined then data.args = []
        if not Array.isArray(data.args) then data.args = [data.args]
        data.args.push((err, result) ->
          payload = {
            type: 'rpc-return'
            data: result
            signature: data.signature
            orig: @id
          }
          @@_log('Sending payload: ', payload)
          connection.send(payload)
        )
        @@scope[data.func].apply(@@scope, data.args)
      else
        payload = {
            type: 'rpc-return'
            data: new Error('unknown function')
            signature: data.signature
            orig: @@id
        }
        @@_log('Sending payload: ', payload)
        connection.send(payload)
    }
