import sha1
import bluebird as Promise
try
  Peer = require('peerjs')
catch error
  # istanbul ignore next
  Peer = undefined

export RPC


class RPC

  init: (id, scope, options) ->
    that = @
    @_callbacks = {}
    @_timeouts = {}

    if options
      peerOptions = options.peerOptions or {}
      peerConfig = options.peerConfig or {}
      @debug = options.debug
      @timeout = options.timeout or 5000

    @peer = new Peer(id, peerOptions, peerConfig)
    @scope = scope
    @id = id

    @peer.on('connection', (connection) ->
      connection.on('data', (data) -> that._onData(connection, data))
    )

  invoke: (id, func, args, callback) ->
    that = @
    if not Array.isArray(args) then throw new Error('args must be an array.')
    if id == that.id
      return new Promise((resolve, reject) ->
        args.push((err, result) ->
          if err then return reject(err)
          resolve(result)
        )
        that.scope[func].apply(that.scope, args)
      ).nodeify(callback)

    payload = {
      type: 'rpc-invoke'
      func: func
      args: args
      orig: @id
      signature: @_createSignature(@id, id, 'invoke')
    }
    return @_sendInvocation(id, payload).nodeify(callback)

  attr: (id, attr, callback) ->
    if id == @id
      return Promise.resolve(@scope[attr]).nodeify(callback)

    payload = {
      type: 'rpc-attr'
      attr: attr
      orig: @id
      signature: @_createSignature(@id, id, 'attr')
    }
    return @_sendInvocation(id, payload).nodeify(callback)

  ping: (id, callback) ->
    if id == @id
      return Promise.resolve(true).nodeify(callback)

    payload = {
      type: 'rpc-ping',
      orig: @id,
      signature: @_createSignature(@id, id, 'ping')
    }
    return @_sendInvocation(id, payload)
      .catch((error) ->
        if error.message.match(/timed out/)
          return false
        throw error
      ).nodeify(callback)

  _createSignature: (from, to, func) -> sha1('#{Date.now()}:#{from}:#{to}:#{func}')

  _onData: (connection, data) ->
    if not 'type' in data then return

    @_log('Received data: ', data)
    if data.error then data.error = new Error(data.error)

    if data.type.match(/^rpc-(:?ping|attr|invoke)$/)
      @_handlers()[data.type].bind(@)(connection, data)

    else if data.type.match(/return/)
      @_callbacks[data.signature](data.error, data.data)

    else if data.type.match(/pong/)
      @_callbacks[data.signature](data.error, true)

  _getConnection: (id) ->
    that = @
    return new Promise((resolve) ->
      if that.peer.connections.hasOwnProperty(id) and that.peer.connections.hasOwnProperty(id)
        connection = that.peer.connections[id][0]
        if connection.open then return resolve(connection)

      connection = that.peer.connect(id)
      connection.on('data', (data) -> that._onData(connection, data))
      if connection.open
        resolve(connection)
      else
        connection.on('open', (conn) ->
          resolve(connection)
        )
    )

  _sendAnswer: (id, payload, connection) ->
    that = @
    promise = null
    if connection
      promise = Promise.resolve(connection)
    else
      promise = that._getConnection(id)

    return promise
      .then((connection) ->
        connection.send(payload)
        that._log('Sending payload to "#{id}": ', payload)
      )

  _sendInvocation: (id, payload, connection) ->
    that = @
    promise = null
    if connection
      promise = Promise.resolve(connection)
    else
      promise = that._getConnection(id)
    return promise
      .then((connection) ->
        return new Promise((resolve, reject) ->
          that._timeouts[payload.signature] = setTimeout(() ->
            reject(new Error('Message timed out.'))
          , that.timeout)

          that._callbacks[payload.signature] = (err, result) ->
            clearTimeout(that._timeouts[payload.signature])
            if err
              reject(err)
            else
              resolve(result)

          connection.send(payload)
        )
      )
      .then((value) ->
          that._log('Sending payload to "#{id}": ', payload)
          return value
      )



  _log: (message, obj) ->
    if not @debug then return
    CircularJSON = require('circular-json')
    console.log('RPC:  #{message} #{CircularJSON.stringify(obj)}')

  _handlers: () ->
    that = @
    return {
    'rpc-ping': (connection, data) ->
      payload = {
        type: 'rpc-pong'
        signature: data.signature
        orig: that.id
      }
      that._sendAnswer(data.orig, payload, connection)

    'rpc-attr': (connection, data) ->
      payload = {
        type: 'rpc-attr-return'
        data: that.scope[data.attr]
        signature: data.signature
        orig: that.id
      }
      that._sendAnswer(data.orig, payload, connection)

    'rpc-invoke': (connection, data) ->
      if data.func in that.scope
        data.args.push((error, result) ->
          payload = {
            type: 'rpc-return'
            data: result or null
            error: null
            signature: data.signature
            orig: that.id
          }
          if error
            payload.error = error.message
          that._sendAnswer(data.orig, payload, connection)
        )
        that.scope[data.func].apply(that.scope, data.args)
      else
        payload = {
            type: 'rpc-return'
            data: null
            error: 'unknown function'
            signature: data.signature
            orig: that.id
        }
        that._sendAnswer(data.orig, payload, connection)
    }
