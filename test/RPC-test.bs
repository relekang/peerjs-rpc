import chai: expect
import bluebird as Promise
import mock-require as mr
import sinon
import peerjs-mock as PeerMock

mr('peerjs', PeerMock)
Promise.longStackTraces()

RPC = require('../lib/RPC')

describe('RPC', () ->
  scope = {
    ping: (arg, callback) -> callback(null, 'pong: #{arg}')
    pinger: (callback) -> callback(null, 'pong')
    add: (arg1, arg2, callback) -> callback(null, arg1 + arg2)
    getAnswer: (callback) -> callback(null, @answer)
    error: (callback) -> callback(new Error('this is an error'))
    answer: 42
  }

  n1 = null
  n2 = null

  beforeEach(() ->
    n1 = new RPC('n1', scope, {debug: false})
    n2 = new RPC('n2', scope, {debug: false})
  )

  describe('.invoke()', () ->
    it('should only accept list as argument', () ->
      expect(() -> n2.invoke('n1', 'pinger')).to.throw(Error, 'args must be an array.')
    )

    describe('using callbacks', () ->
      it('should invoke with no arguments and return value', (done) ->
        n1.invoke('n2', 'pinger', [], (err, result) ->
          if err then return done(err)

          expect(result).to.equal('pong')
          done()
        )
      )

      it('should invoke with one argument and return value', (done) ->
        n1.invoke('n2', 'ping', ['42'], (err, result) ->
          if err then return done(err)

          expect(result).to.equal('pong: 42')
          done()
        )
      )

      it('should return error of invoked function', (done) ->
        n1.invoke('n2', 'error', [], (err, result) ->
          expect(err.message).to.equal('this is an error')
          done()
        )
      )

      it('should invoke with multiple arguments and return value', (done) ->
        n1.invoke('n2', 'add', [40, 2], (err, result) ->
          if err then return done(err)

          expect(result).to.equal(42)
          done()
        )
      )

      it('should be able to reference scope in invoked functions', (done) ->
        n1.invoke('n2', 'getAnswer', [], (err, result) ->
          if err then return done(err)

          expect(result).to.equal(42)
          done()
        )
      )

      it('should return error if the function does not exits', (done) ->
        n1.invoke('n2', 'non-existing-function', [], (err, result) ->
          expect(err.message).to.equal('unknown function')
          done()
        )
      )

      it('should call itself directly', (done) ->
        spy = sinon.spy(n1, '_sendInvocation')
        n1.invoke('n1', 'add', [40, 2], (err, result) ->
          if err then return done(err)

          expect(result).to.equal(42)
          expect(spy.called).to.be.false
          done()
        )
      )

    )

    describe('using promises', () ->
      it('should invoke with no arguments and return value', () ->
        return n1.invoke('n2', 'pinger', [])
          .then((result) ->
            expect(result).to.equal('pong')
          )
      )

      it('should invoke with one argument and return value', () ->
        return n1.invoke('n2', 'ping', ['42'])
          .then((result) ->
            expect(result).to.equal('pong: 42')
          )
      )

      it('should return error of invoked function', () ->
        catched = false
        return n1.invoke('n2', 'error', [])
          .catch((error) ->
            expect(error.message).to.equal('this is an error')
            catched = true
          )
          .then(() -> expect(catched).to.be.true)
      )

      it('should invoke with multiple arguments and return value', () ->
        return n1.invoke('n2', 'add', [40, 2])
          .then((result) ->
            expect(result).to.equal(42)
          )
      )

      it('should be able to reference scope in invoked functions', () ->
        return n1.invoke('n2', 'getAnswer', [])
          .then((result) ->
            expect(result).to.equal(42)
          )
      )

      it('should return error if the function does not exits', () ->
        catched = false
        return n1.invoke('n2', 'non-existing-function', [])
          .catch((err) ->
            expect(err.message).to.equal('unknown function')
            catched = true
          )
          .then(() -> expect(catched).to.be.true)
      )

      it('should call itself directly', () ->
        spy = sinon.spy(n1, '_sendInvocation')
        return n1.invoke('n1', 'add', [40, 2])
          .then((result) ->
            expect(result).to.equal(42)
            expect(spy.called).to.be.false
          )
      )
    )
  )

  describe('.attr()', () ->
    describe('using callbacks', () ->
      it('should return attribute value', (done) ->
        n1.attr('n2', 'answer', (err, result) ->
          if err then return done(err)

          expect(result).to.equal(42)
          done()
        )
      )
      it('should call itself directly', (done) ->
        spy = sinon.spy(n1, '_sendInvocation')
        n1.attr('n1', 'answer', (err, result) ->
          if err then return done(err)

          expect(result).to.equal(42)
          expect(spy.called).to.be.false
          done()
        )
      )
    )

    describe('using promises', () ->
      it('should return attribute value', () ->
        return n1.attr('n2', 'answer')
          .then((result) ->
            expect(result).to.equal(42)
          )
      )

      it('should call itself directly', () ->
        spy = sinon.spy(n1, '_sendInvocation')
        return n1.attr('n1', 'answer')
          .then((result) ->
            expect(result).to.equal(42)
            expect(spy.called).to.be.false
          )
      )
    )
  )

  describe('.ping()', () ->
    describe('using callbacks', () ->
      it('should ping and receive pong', (done) ->
        n1.ping('n2', (err, result) ->
          expect(result).to.be.truthy
          done()
        )
      )

      it('should return false if ping times out', (done) ->
        n = new RPC('n', scope, { timeout: 1 })
        n.ping('n2', (err, result) ->
          expect(result).to.be.false
          done()
        )
      )

      it('should reject with error from ping', (done) ->
        n1._handlers = () -> {
          'rpc-ping': (connection, data) ->
            payload = {
              type: 'rpc-pong',
              signature: data.signature,
              error: new Error('an error')
            }
            n1._sendAnswer(data.orig, payload, connection)
        }
        n2.ping('n1', (err, callback) ->
          expect(err.message).to.equal('an error')
          done()
        )
      )

      it('should call itself directly', (done) ->
        spy = sinon.spy(n1, '_sendInvocation')
        return n1.ping('n1', (err, result) ->
          if err then return done(err)
          expect(result).to.true
          expect(spy.called).to.be.false
          done()
        )
      )
    )
    describe('using promises', () ->
      it('should ping and receive pong', () ->
        return n1.ping('n2')
          .then((result) ->
            expect(result).to.be.true
          )
      )

      it('should return false if ping times out', () ->
        n = new RPC('n', scope, { timeout: 1 })
        return n.ping('n2')
          .then((result) ->
            expect(result).to.be.false
          )
      )

      it('should reject with error from ping', () ->
        n1._handlers = () -> {
          'rpc-ping': (connection, data) ->
            payload = {
              type: 'rpc-pong',
              signature: data.signature,
              error: new Error('an error')
            }
            n1._sendAnswer(data.orig, payload, connection)
        }
        catched = false
        return n2.ping('n1')
          .catch((err) ->
            catched = true
            expect(err.message).to.equal('an error')
          )
          .then(() ->
            expect(catched).to.be.true
          )
      )

      it('should call itself directly', () ->
        spy = sinon.spy(n1, '_sendInvocation')
        return n1.ping('n1')
          .then((result) ->
            expect(result).to.true
            expect(spy.called).to.be.false
          )
      )
    )
  )

  describe('._log()', () ->
    it('should not log if debug is false', () ->
      sinon.stub(console, 'log')
      n1._log('message', {})
      called = console.log.calledOnce
      console.log.restore()
      expect(called).to.be.false
    )

    xit('should log if debug is true', () ->
      sinon.stub(console, 'log')
      n1.debug = true
      n1._log('message', {})
      called = console.log.calledOnce
      console.log.restore()
      expect(called).to.be.true
    )
  )
)
